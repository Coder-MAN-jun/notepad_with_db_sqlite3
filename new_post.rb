# encoding: utf-8
# 
# Программа <<Блокнот>>, демонстрирующяя наследование классов в ruby.
# 
# (с) goodprogrammer.ru
# 
# ---

# Подключаем класс Post и его детей: Memo, Link, Task
require_relative 'post.rb'
require_relative 'memo.rb'
require_relative 'link.rb'
require_relative 'task.rb'

# Поздороваемся с пользователем и спросим у него, что он хочет создать.
puts "Привет, я твой блокнот! Версия 2 + Sqlite"
puts "Что хотите записать в блокнот?"

# Запишем в переменную choices массив типов записей, которые можно создать
# вызвав у класса Post метод post_types (статический метод)
choices = Post.post_types.keys

# Для начала цикла запишем в переменную choice (куда позже будем складывать
# выбор пользователя) значение -1
choice = -1

# Пока юзер не выбрал правильно (от 0 до длины массива вариантов), спрашиваем
# у него число и выводим список возможных вариантов для записи. 
until choice >= 0 && choice < choices.size

	choices.each_with_index do |type, index|
		puts "\t#{index}. #{type}"
	end
    
    # Запишем выбор пользователя в переменную choice
	choice = STDIN.gets.chomp.to_i
end

# Как только выбор сделан, мы можем создать запись нужного типа, передав выбор
# пользователя в статический метод класса Post, который мы фактически
# используем как конструктор.
entry = Post.create(choices[choice])

# Сейчас в переменной entry лежит один из детей класса Post, какой именно,
# определилось выбором пользователя, переменной choice. Но мы не знаем какой
# и обращамся с entry как с объектом класса Post, этого оказывается достаточно
# так как у любого наследника класса Post должны быть реализованны методы
# read_from_console
entry.read_from_console

# Сохраняем пост в файл
id = entry.save_to_db

# Сообщаем пользователю о том, что его запись сохранена в файл.
puts "Ваша запись сохранена, id = #{id}"

# Как обычно, при использовании классов программа выглядит очень локанично!